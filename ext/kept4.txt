<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>3D Greeting Card</title>
  <style>
    body {
      margin: 0;
      overflow: hidden;
    }
    canvas {
      display: block;
    }
    .label {
        text-align: center;
        width: 100%;
        /* height: 20px; */
        border: 1px solid white;
        font-size: 20px;
        border-radius: 5px;
        color: #4f8;
        font-family: sans-serif;
        background: rgba( 0, 0, 0,1 );
    }
  </style>
</head>
<body>
    <script async src="https://unpkg.com/es-module-shims@1.3.6/dist/es-module-shims.js"></script>

    <script type="importmap">
        {
            "imports": {
                "three": "https://unpkg.com/three@0.138.3/build/three.module.js"
            }
        }
    </script>
    
    <script type="module">
    
        import * as THREE from 'three';
import { OrbitControls } from "https://unpkg.com/three@0.112/examples/jsm/controls/OrbitControls.js";
import { FontLoader } from 'https://unpkg.com/three@0.138.3/examples/jsm/loaders/FontLoader.js';
import { TextGeometry } from 'https://unpkg.com/three@0.138.3/examples/jsm/geometries/TextGeometry.js';
import { CSS3DRenderer, CSS3DObject } from 'https://unpkg.com/three@0.138.3/examples/jsm/renderers/CSS3DRenderer.js';
// import { TrackballControls } from 'three/addons/controls/TrackballControls.js';
// 			import { CSS3DRenderer, CSS3DObject } from 'three/addons/renderers/CSS3DRenderer.js';

// three/addons/geometries/TextGeometry.js
// 'three/addons/controls/OrbitControls.js';
// 'three/addons/loaders/GLTFLoader.js';
var scene = new THREE.Scene();
var camera = new THREE.PerspectiveCamera( 40, window.innerWidth / window.innerHeight, 1, 10000 );
camera.position.set( 100, 100, 200 );
var renderer = new THREE.WebGLRenderer({
  antialias: true
});
renderer.setSize(window.innerWidth, window.innerHeight);
var labelRenderer = new CSS3DRenderer();
labelRenderer.setSize( innerWidth, innerHeight );
labelRenderer.domElement.style.position = 'absolute';
labelRenderer.domElement.style.top = '0px';
document.body.appendChild(renderer.domElement);
document.body.appendChild( labelRenderer.domElement );

var controls = new OrbitControls(camera, labelRenderer.domElement);

var light = new THREE.DirectionalLight(0xffffff, 1);
light.position.set( 20,20, 40 );
scene.add(light);
scene.add(new THREE.AmbientLight(0xffffff, 1));

var loader = new THREE.CubeTextureLoader();
    loader.setCrossOrigin( "" );
    loader.setPath( 'bg/' );

    var cubeTexture = loader.load( [
    'mobile_l.jpg', 'mobile_r.jpg',
    'mobile_u.jpg', 'mobile_d.jpg',
    'mobile_b.jpg', 'mobile_f.jpg',
    ] );

    // scene.background = cubeTexture;

var m_width = 75;
var m_height = 100;

var pos = new THREE.Vector3(0, 0, 3);
var normal = new THREE.Vector3(0, 0, 1);

var cNormal = new THREE.Vector3();
var cPos = new THREE.Vector3();
var m4 = new THREE.Matrix4();
var div = document.createElement( 'div' );

var profileShape1 = new THREE.Shape();
profileShape1.moveTo(0, 0);
profileShape1.lineTo(5, 0);
profileShape1.lineTo(5,5);
profileShape1.lineTo(2.5, 5);
profileShape1.lineTo(2.5, 2.5);
profileShape1.lineTo(0, 2.5);

var contour1 = [
  new THREE.Vector2(0, 0),
  new THREE.Vector2(m_width, 0),
  new THREE.Vector2(m_width,m_height),
  new THREE.Vector2(0,m_height),
];
let cubeMat = new THREE.MeshStandardMaterial( {
        color: 0x964B00,
        envMap: cubeTexture,
        metalness: 6 / 9,
        roughness: 1 - 3 / 9,
    } );
    var geometry1 = ProfiledContourGeometry(profileShape1, contour1, true);
    geometry1.center();
    var fullProfile1 = new THREE.Mesh(geometry1, cubeMat);
    let backgroundTexture = new THREE.TextureLoader().load('bgwhite.png');
    backgroundTexture.wrapT = THREE.RepeatWrapping;
    backgroundTexture.wrapS = THREE.RepeatWrapping;

    // Set how many times you want the texture to repeat
    backgroundTexture.repeat.set(1/75, 1/100);
    let backgroundMat = new THREE.MeshBasicMaterial({
        map: backgroundTexture,
    });
    let backfaceMat = new THREE.MeshBasicMaterial({
        color: 0x333333,
    });
    let backgroundGeometry = createBackgroundGeometry(m_width-2, m_height-2, 0.2, 2 / 9, 16);
    let backgroundBack = new THREE.Mesh(backgroundGeometry, backfaceMat);
    let backgroundFront = new THREE.Mesh(backgroundGeometry, backgroundMat);
    backgroundFront.position.z = -1.5;
    backgroundBack.position.z = -2;
    scene.add(backgroundFront, fullProfile1, backgroundBack); //

div.className = 'label';
div.textContent = "This is the label. Welcome to New York, if I don't crack it it won't crack. You said he rips, but he didn't have no peace o. But now he rests in peace o, in the belly of the beast o";
div.style.width = 300+'px';
const size = new THREE.Vector3()
const measure = new THREE.Box3().setFromObject(backgroundFront).getSize(size);
console.log( measure );
console.log(backgroundFront);
var label = new CSS3DObject( div );
label.position.copy(pos);
// label.rotation.x = Math.PI * 0.5;
label.scale.set(0.2, 0.2, 1);
backgroundFront.add( label );

function onSeeSomething(){
    controls = new TrackballControls( camera, renderer.domElement );
				controls.rotateSpeed = 4;

				window.addEventListener( 'resize', onWindowResize );

				// Block iframe events when dragging camera

				const blocker = document.getElementById( 'blocker' );
				blocker.style.display = 'none';

				controls.addEventListener( 'start', function () {

					blocker.style.display = '';

				} );
				controls.addEventListener( 'end', function () {

					blocker.style.display = 'none';

				} );
}


render();
function onWindowResize() {

camera.aspect = window.innerWidth / window.innerHeight;
camera.updateProjectionMatrix();
renderer.setSize( window.innerWidth, window.innerHeight );

}

let entriesSeen = new Set(); // set of entries to skip initial resize call

const obs = new ResizeObserver((entries) => {
    for (let entry of entries) {
        if (!entriesSeen.has(entry.target)) {
            // do nothing during initial call
            // just mark element as seen
            entriesSeen.add(entry.target);
            console.log('resize ignored');
        } else {
            console.log('resize detected');
            // onWindowResize;
            // render();
        }
    }
});
obs.observe(document.body);

function animate() {

requestAnimationFrame( animate );
controls.update();
renderer.render( scene, camera );

}
function render() {
  requestAnimationFrame(render);
	
  cNormal.copy(normal).applyMatrix3(backgroundFront.normalMatrix);
  cPos.copy(pos).applyMatrix4(m4.multiplyMatrices(camera.matrixWorldInverse, backgroundFront.matrixWorld));
  let d = cPos.negate().dot(cNormal);
  
    div.style.visibility = d < 0 ? "hidden" : "visible";
  
	renderer.render(scene, camera);
    labelRenderer.render( scene, camera );
}
function createBackgroundGeometry(width, height, depth, radius0, smoothness) {
    let margin = 0; // Adjust this value to control the margin

    let shape = new THREE.Shape();
    let eps = 0.00001;
    let radius = radius0 - eps;
    
    // Define the shape with a margin
    shape.absarc(eps + margin, eps + margin, eps, -Math.PI / 2, -Math.PI, true);
    shape.absarc(eps + margin, height - radius * 2 - margin, eps, Math.PI, Math.PI / 2, true);
    shape.absarc(width - radius * 2 - margin, height - radius * 2 - margin, eps, Math.PI / 2, 0, true);
    shape.absarc(width - radius * 2 - margin, eps + margin, eps, 0, -Math.PI / 2, true);
    
    // Create the extruded geometry with a smaller depth to accommodate the margin
    let geometry = new THREE.ExtrudeBufferGeometry(shape, {
        depth: depth - radius0 * 2,
        bevelEnabled: true,
        bevelSegments: smoothness * 2,
        steps: 1,
        bevelSize: radius,
        bevelThickness: radius0,
        curveSegments: smoothness,
    });

    geometry.center();

    return geometry;
}

 function ProfiledContourGeometry(profileShape, contour, contourClosed, openEnded) {
    
  	contourClosed = contourClosed !== undefined ? contourClosed : true;
    openEnded = openEnded !== undefined ? openEnded : false;
    openEnded = contourClosed === true ? false : openEnded;
		
    let profileGeometry = new THREE.ShapeBufferGeometry(profileShape);
    let flipProfileGeometry = flipShapeGeometry(profileGeometry);
    profileGeometry.rotateX(Math.PI * 0.5);
    let profile = profileGeometry.attributes.position;
		
    let addEnds = openEnded === false ? 2 : 0;
    let profilePoints = new Float32Array(profile.count * (contour.length + addEnds) * 3);
		
    let endProfiles = [];
    
    for (let i = 0; i < contour.length; i++) {
      let v1 = new THREE.Vector2().subVectors(contour[i - 1 < 0 ? contour.length - 1 : i - 1], contour[i]);
      let v2 = new THREE.Vector2().subVectors(contour[i + 1 == contour.length ? 0 : i + 1], contour[i]);
      let angle = v2.angle() - v1.angle();
      let halfAngle = angle * 0.5;
			
      let hA = halfAngle;
      let tA = v2.angle() + Math.PI * 0.5;
      if (!contourClosed){
      	if (i == 0 || i == contour.length - 1) {hA = Math.PI * 0.5;}
        if (i == contour.length - 1) {tA = v1.angle() - Math.PI * 0.5;}
      }
      
      let shift = Math.tan(hA - Math.PI * 0.5);
      let shiftMatrix = new THREE.Matrix4().set(
             1, 0, 0, 0, 
        -shift, 1, 0, 0,
             0, 0, 1, 0,
             0, 0, 0, 1
      );
			
      
      let tempAngle = tA;
      let rotationMatrix = new THREE.Matrix4().set(
        Math.cos(tempAngle), -Math.sin(tempAngle), 0, 0,
        Math.sin(tempAngle),  Math.cos(tempAngle), 0, 0,
                          0,                    0, 1, 0,
                          0,                    0, 0, 1
      );

      let translationMatrix = new THREE.Matrix4().set(
        1, 0, 0, contour[i].x,
        0, 1, 0, contour[i].y,
        0, 0, 1, 0,
        0, 0, 0, 1,
      );

      let cloneProfile = profile.clone();
   		shiftMatrix.applyToBufferAttribute(cloneProfile);
      rotationMatrix.applyToBufferAttribute(cloneProfile);
      translationMatrix.applyToBufferAttribute(cloneProfile);

      profilePoints.set(cloneProfile.array, cloneProfile.count * i * 3);
      if (openEnded === false && (i === 0 || i === contour.length - 1)){
      	endProfiles.push(cloneProfile);
      }
    }
    
    endProfiles.forEach((ep, idx) => {
    	profilePoints.set(ep.array, ep.count * (contour.length + idx) * 3)
    });

    let fullProfileGeometry = new THREE.BufferGeometry();
    fullProfileGeometry.addAttribute("position", new THREE.BufferAttribute(profilePoints, 3));
    let index = [];
		
    let lastCorner = contourClosed == false ? contour.length - 1: contour.length;
    for (let i = 0; i < lastCorner; i++) {
      for (let j = 0; j < profile.count; j++) {
        let currCorner = i;
        let nextCorner = i + 1 == contour.length ? 0 : i + 1;
        let currPoint = j;
        let nextPoint = j + 1 == profile.count ? 0 : j + 1;

        let a = nextPoint + profile.count * currCorner;
        let b = currPoint + profile.count * currCorner;
        let c = currPoint + profile.count * nextCorner;
        let d = nextPoint + profile.count * nextCorner;


        index.push(a, b, d);
        index.push(b, c, d);
      }
    }
    
    if (openEnded === false){
    	// add indices from profile geometries
      flipProfileGeometry.index.array.forEach(i => {index.push(i +  profile.count * (contour.length))});
      profileGeometry.index.array.forEach(i =>{index.push(i + profile.count * (contour.length + 1))});
      
    }

    fullProfileGeometry.setIndex(index);
    fullProfileGeometry.computeVertexNormals();

    return fullProfileGeometry;
  }
  
  function flipShapeGeometry(shapeGeometry) {
    let flipGeom = shapeGeometry.clone();
    for (let i = 0; i < flipGeom.attributes.position.count; i++) {
      flipGeom.attributes.position.array[i * 3] *= -1;
    }
    flipGeom.attributes.position.needsUpdate = true;

    var index = flipGeom.index.array;
    for (let i = 0; i < index.length; i += 3) {
      let v2 = index[i + 1];
      let tmp = v2;
      let v3 = index[i + 2];
      index[i + 1] = index[i + 2];
      index[i + 2] = tmp;
    }
    flipGeom.computeVertexNormals();
    return flipGeom;
  } 
  </script>
</body>
</html>
